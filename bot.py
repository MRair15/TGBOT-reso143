import logging
import re
import uuid
import json
import asyncio
import hashlib
import hmac
from datetime import datetime
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
import gspread
from google.oauth2.service_account import Credentials
import yookassa
from yookassa import Payment
from config import *

# –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ÆKassa
yookassa.Configuration.account_id = YOOKASSA_SHOP_ID
yookassa.Configuration.secret_key = YOOKASSA_SECRET_KEY

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO, # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–∞ DEBUG –¥–ª—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –ª–æ–≥–∞
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('bot.log')
    ]
)
logger = logging.getLogger(__name__)

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–π
USER_STATE_WAITING_FOR_TICKET_COUNT = 'waiting_for_ticket_count'
USER_STATE_WAITING_FOR_NAME = 'waiting_for_name'
USER_STATE_WAITING_FOR_PHONE = 'waiting_for_phone'
USER_STATE_WAITING_FOR_PAYMENT_CONFIRMATION = 'waiting_for_payment_confirmation'

GS_HEADERS = [
    'User ID', 'Username', '–ò–º—è', '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', # –ò–∑–º–µ–Ω–∏–ª
    '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–ª–µ—Ç–æ–≤', '–°—É–º–º–∞', '–ö–æ–≥–¥–∞ –∫—É–ø–ª–µ–Ω–æ', '–°—Ç–∞—Ç—É—Å', 'Payment ID' # –î–æ–±–∞–≤–∏–ª Payment ID
]
# –ò —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ –æ–±–Ω–æ–≤–∏—Ç–µ –∏–Ω–¥–µ–∫—Å—ã —Å—Ç–æ–ª–±—Ü–æ–≤:
GS_COL_NAME = 3
GS_COL_PHONE = 4
GS_COL_DATE = 7
GS_COL_STATUS = 8
GS_COL_PAYMENT_ID = 9 # –ù–æ–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü

class MatrixBot:
    def __init__(self):
        self.sheet = None
        self.initialize_google_sheets()
    
    def initialize_google_sheets(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets"""
        try:
            if GOOGLE_SERVICE_ACCOUNT:
                credentials_info = json.loads(GOOGLE_SERVICE_ACCOUNT)
                credentials = Credentials.from_service_account_info(credentials_info, scopes=SCOPES)
                gc = gspread.authorize(credentials)
                self.sheet = gc.open_by_key(SPREADSHEET_ID).sheet1
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏, –µ—Å–ª–∏ –Ω–µ—Ç - –¥–æ–±–∞–≤–ª—è–µ–º
                first_cell_value = self.sheet.cell(1, 1).value
                if not first_cell_value:
                    logger.info("–ó–∞–≥–æ–ª–æ–≤–∫–∏ –≤ Google Sheets –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ.")
                    self.sheet.append_row(GS_HEADERS)
                else:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–≤–ø–∞–¥–∞—é—Ç –ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏
                    existing_headers = self.sheet.row_values(1)
                    if existing_headers != GS_HEADERS:
                        logger.warning(f"–ó–∞–≥–æ–ª–æ–≤–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç. –û–∂–∏–¥–∞–ª–æ—Å—å: {GS_HEADERS}, –ü–æ–ª—É—á–µ–Ω–æ: {existing_headers}")
                        # –ú–æ–∂–Ω–æ –ª–∏–±–æ –≤—ã–¥–∞—Ç—å –æ—à–∏–±–∫—É, –ª–∏–±–æ –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è
                        # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
                    else:
                        logger.info("–ó–∞–≥–æ–ª–æ–≤–∫–∏ –≤ Google Sheets –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã –∏ —Å–æ–≤–ø–∞–¥–∞—é—Ç.")
                logger.info("Google Sheets –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            else:
                logger.error("GOOGLE_SERVICE_ACCOUNT –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏!")
                self.sheet = None
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets: {e}", exc_info=True)
            self.sheet = None
    
    def is_valid_phone(self, phone):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –≤–∞–ª–∏–¥–Ω—ã–º —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º.
        –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç—ã: +79001234567, 89001234567
        """
        if not phone:
            return False
        # –£–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã, –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä –∏ +
        clean_phone = re.sub(r'[^\d+]', '', phone)
        
        # –ï—Å–ª–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 8, –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ +7
        if clean_phone.startswith('8'):
            clean_phone = '+7' + clean_phone[1:]
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ +7 –∏ –¥–ª–∏–Ω—ã
        if clean_phone.startswith('+7') and len(clean_phone) == 12 and clean_phone[1:].isdigit():
            return True
            
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ (–ø—Ä–∏–º–µ—Ä)
        if clean_phone.startswith('+') and 10 <= len(clean_phone) <= 16 and clean_phone[1:].isdigit():
            return True
        
        return False

    def find_row_by_payment_id(self, payment_id):
        """–ù–∞—Ö–æ–¥–∏—Ç –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ –ø–æ Payment ID. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç -1, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."""
        if not self.sheet:
            logger.error("Google Sheets –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—Ç—Ä–æ–∫–∏.")
            return -1
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è, –≤–∫–ª—é—á–∞—è –∑–∞–≥–æ–ª–æ–≤–∫–∏
            all_values = self.sheet.get_all_values()
            if not all_values:
                logger.warning("–¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞.")
                return -1
            
            headers = all_values[0] # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ - –∑–∞–≥–æ–ª–æ–≤–∫–∏
            try:
                payment_id_col_index = headers.index('Payment ID') + 1 # gspread –∏—Å–ø–æ–ª—å–∑—É–µ—Ç 1-based –∏–Ω–¥–µ–∫—Å
            except ValueError:
                logger.error("–°—Ç–æ–ª–±–µ—Ü 'Payment ID' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö —Ç–∞–±–ª–∏—Ü—ã.")
                return -1

            # –ü–æ–∏—Å–∫ —Å—Ç—Ä–æ–∫–∏ —Å –Ω—É–∂–Ω—ã–º payment_id
            for i, row in enumerate(all_values[1:], start=2): # –ù–∞—á–∏–Ω–∞–µ–º —Å 2, —Ç.–∫. –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ - –∑–∞–≥–æ–ª–æ–≤–∫–∏
                if len(row) >= payment_id_col_index and row[payment_id_col_index - 1] == str(payment_id):
                    logger.info(f"–ù–∞–π–¥–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ —Å Payment ID {payment_id} –≤ —Å—Ç—Ä–æ–∫–µ {i}.")
                    return i
            logger.info(f"–°—Ç—Ä–æ–∫–∞ —Å Payment ID {payment_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return -1
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å—Ç—Ä–æ–∫–∏ –ø–æ Payment ID: {e}", exc_info=True)
            return -1

    def user_already_registered(self, user_id):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–æ–π"""
        if not self.sheet:
            logger.warning("Google Sheets –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
            return False
        try:
            records = self.sheet.get_all_records()
            logger.debug(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è User ID: {user_id}. –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(records)}")
            for record in records:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã
                if str(record.get('User ID', '')) == str(user_id) and str(record.get('–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã', '')) == '–û–ø–ª–∞—á–µ–Ω–æ':
                    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∏ –æ–ø–ª–∞—Ç–∏–ª.")
                    return True
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∫–∞–∫ –æ–ø–ª–∞—Ç–∏–≤—à–∏–π.")
            return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è User ID {user_id}: {e}", exc_info=True)
            return False

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        try:
            user_id = update.effective_user.id
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞ (/start).")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            if self.user_already_registered(user_id):
                await update.message.reply_text("‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏!")
                return
            
            # –ù–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            welcome_text = (
                "üé≤ <b>–î–æ—Ä–æ–≥–æ–π –¥—Ä—É–≥!</b>\n\n"
                "üîÆ –ü—Ä–∏–≥–ª–∞—à–∞—é —Ç–µ–±—è –Ω–∞ –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—É—é –∏–≥—Ä—É\n"
                "‚ú® <b>¬´–í—ã—Ö–æ–¥ –∏–∑ –ú–∞—Ç—Ä–∏—Ü—ã¬ª</b> ‚ú®\n\n"
                "üìÖ <b>–î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è:</b> 27 —Å–µ–Ω—Ç—è–±—Ä—è \n"
                "üéüÔ∏è <b>–°—Ç–æ–∏–º–æ—Å—Ç—å –±–∏–ª–µ—Ç–∞:</b> <code>{price} —Ä—É–±.</code>\n\n"
                "–ó–¥–µ—Å—å —Ç—ã –æ—Ç–∫—Ä–æ–µ—à—å –Ω–æ–≤—ã–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç—ã —Å–≤–æ–µ–≥–æ —Å–æ–∑–Ω–∞–Ω–∏—è, –Ω–∞–π–¥–µ—à—å –ø—É—Ç—å –∫ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º —Ä–µ—Å—É—Ä—Å–∞–º –∏ —Å–¥–µ–ª–∞–µ—à—å –ø–µ—Ä–≤—ã–µ —à–∞–≥–∏ –∫ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ–º—É –∏–∑–º–µ–Ω–µ–Ω–∏—é —Å–≤–æ–µ–π –∂–∏–∑–Ω–∏üéØ\n\n"
                "–ü—É—Å—Ç—å –∏–≥—Ä–∞ —Å—Ç–∞–Ω–µ—Ç –Ω–∞—á–∞–ª–æ–º —Ç–≤–æ–µ–≥–æ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–µ–≥–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –∫ –º–µ—á—Ç–µ –∏ —Å—á–∞—Å—Ç—å—é!üíå"
            ).format(price=TICKET_PRICE)
            
            keyboard = [[InlineKeyboardButton("üéüÔ∏è –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", callback_data='register')]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(welcome_text, parse_mode='HTML', reply_markup=reply_markup)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ start handler –¥–ª—è User ID {update.effective_user.id if update.effective_user else 'unknown'}: {e}", exc_info=True)
            await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    async def button(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∫–Ω–æ–ø–æ–∫"""
        try:
            query = update.callback_query
            await query.answer()
            user_id = query.from_user.id
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É: {query.data}")
            
            if query.data == 'register':
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                if self.user_already_registered(user_id):
                    await query.edit_message_text("‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏!")
                    return
                    
                # –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é - —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–ª–µ—Ç–æ–≤
                context.user_data['state'] = USER_STATE_WAITING_FOR_TICKET_COUNT
                await query.edit_message_text(
                    "üéüÔ∏è <b>–°–∫–æ–ª—å–∫–æ –±–∏–ª–µ—Ç–æ–≤ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏?</b>\n\n"
                    "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10:",
                    parse_mode='HTML'
                )
            
            elif query.data.startswith('pay_'):
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–ª–∞—Ç—ã
                payment_id = query.data.split('_', 1)[1] # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ
                await self.process_payment(update, context, payment_id)
            
            elif query.data.startswith('check_payment_'):
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã
                payment_id = query.data.split('_', 2)[2] # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ
                await self.check_payment_status(update, context, payment_id)
            
            elif query.data == 'confirm_payment':
                # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã (—É—Å—Ç–∞—Ä–µ–≤—à–∏–π –≤—ã–∑–æ–≤, –Ω–æ –æ—Å—Ç–∞–≤–∏–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
                payment_id = context.user_data.get('payment_id')
                if payment_id:
                     await self.check_payment_status(update, context, payment_id)
                else:
                     await query.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: ID –ø–ª–∞—Ç–µ–∂–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            
            elif query.data == 'cancel_payment':
                # –û—Ç–º–µ–Ω–∞ –æ–ø–ª–∞—Ç—ã
                await self.cancel_payment(update, context)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ button handler –¥–ª—è User ID {update.callback_query.from_user.id if update.callback_query and update.callback_query.from_user else 'unknown'}: {e}", exc_info=True)
            try:
                await update.callback_query.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
            except:
                pass

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            user_id = update.effective_user.id
            text = update.message.text.strip()
            state = context.user_data.get('state')
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ {state}: '{text}'")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–∫—Ä–æ–º–µ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±–∏–ª–µ—Ç–æ–≤)
            if self.user_already_registered(user_id) and state != USER_STATE_WAITING_FOR_TICKET_COUNT:
                await update.message.reply_text("‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏!")
                return
            
            if state == USER_STATE_WAITING_FOR_TICKET_COUNT:
                try:
                    ticket_count = int(text)
                    if 1 <= ticket_count <= 10:
                        context.user_data['ticket_count'] = ticket_count
                        context.user_data['state'] = USER_STATE_WAITING_FOR_NAME
                        await update.message.reply_text("üë§ <b>–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:</b>", parse_mode='HTML')
                    else:
                        await update.message.reply_text("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10.")
                except ValueError:
                    await update.message.reply_text("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
                    
            elif state == USER_STATE_WAITING_FOR_NAME:
                if len(text) < 2:
                    await update.message.reply_text("‚ö†Ô∏è –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞.")
                    return
                context.user_data['name'] = text
                context.user_data['state'] = USER_STATE_WAITING_FOR_PHONE
                await update.message.reply_text("üì± <b>–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b>\n–ü—Ä–∏–º–µ—Ä: +79001234567", parse_mode='HTML')
                
            elif state == USER_STATE_WAITING_FOR_PHONE:
                logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞: {text}")
                if not self.is_valid_phone(text):
                    await update.message.reply_text(
                        "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n"
                        "–ü—Ä–∏–º–µ—Ä: +79001234567 –∏–ª–∏ 89001234567"
                    )
                    return
                context.user_data['phone'] = text
                # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –æ–ø–ª–∞—Ç—ã
                await self.show_payment_button(update, context)
            else:
                # –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞
                logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {state}")
                await update.message.reply_text("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –í–≤–µ–¥–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_message –¥–ª—è User ID {update.effective_user.id if update.effective_user else 'unknown'}: {e}", exc_info=True)
            await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    async def show_payment_button(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑ –∫–Ω–æ–ø–∫–∏ –æ–ø–ª–∞—Ç—ã"""
        try:
            user_data = {
                'name': context.user_data.get('name', ''),
                'phone': context.user_data.get('phone', ''),
                'ticket_count': context.user_data.get('ticket_count', 1)
            }
            
            total_amount = user_data['ticket_count'] * TICKET_PRICE
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞
            payment_id = str(uuid.uuid4())
            context.user_data['payment_id'] = payment_id
            context.user_data['total_amount'] = total_amount
            context.user_data['state'] = USER_STATE_WAITING_FOR_PAYMENT_CONFIRMATION
            
            # –°–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ –∑–∞–∫–∞–∑–∞
            order_text = (
                "üìÑ <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞:</b>\n\n"
                f"üë§ –ò–º—è: <code>{user_data['name']}</code>\n"
                f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: <code>{user_data['phone']}</code>\n"
                f"üéüÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–ª–µ—Ç–æ–≤: <b>{user_data['ticket_count']}</b>\n"
                f"üí∞ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: <b>{total_amount} —Ä—É–±.</b>\n\n"
                "–î–ª—è –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:"
            )
            
            keyboard = [[InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ –ÆKassa", callback_data=f'pay_{payment_id}')]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(order_text, parse_mode='HTML', reply_markup=reply_markup)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ show_payment_button –¥–ª—è User ID {update.effective_user.id if update.effective_user else 'unknown'}: {e}", exc_info=True)
            await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.")

    async def process_payment(self, update: Update, context: ContextTypes.DEFAULT_TYPE, payment_id):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ –ÆKassa"""
        try:
            query = update.callback_query
            user_id = query.from_user.id
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —ç—Ç–æ —Ç–æ—Ç –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä—ã–π –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª –ø–ª–∞—Ç–µ–∂
            if context.user_data.get('payment_id') != payment_id:
                logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á—É–∂–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞. User ID: {user_id}, Payment ID: {payment_id}")
                await query.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –ø–ª–∞—Ç–µ–∂–∞.", show_alert=True)
                return

            total_amount = context.user_data.get('total_amount', 0)
            user_data = {
                'name': context.user_data.get('name', ''),
                'phone': context.user_data.get('phone', ''),
                'ticket_count': context.user_data.get('ticket_count', 1)
            }
            
            if total_amount <= 0:
                logger.error(f"–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã: {total_amount}")
                await query.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞.", show_alert=True)
                return

            logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –≤ –ÆKassa –¥–ª—è User ID: {user_id}, Payment ID: {payment_id}, –°—É–º–º–∞: {total_amount}")

            # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ –ÆKassa
            payment = Payment.create({
                "amount": {
                    "value": f"{total_amount:.2f}", # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ 2 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
                    "currency": "RUB"
                },
                "confirmation": {
                    "type": "redirect",
                    "return_url": f"https://t.me/{context.bot.username}" # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –±–æ—Ç–∞ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                },
                "capture": True,
                "description": f"–û–ø–ª–∞—Ç–∞ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ –∏–≥—Ä–µ '–í—ã—Ö–æ–¥ –∏–∑ –ú–∞—Ç—Ä–∏—Ü—ã'. –ë–∏–ª–µ—Ç–æ–≤: {user_data['ticket_count']}",
                "metadata": {
                    "payment_id": payment_id,
                    "user_id": str(user_id),
                    "name": user_data['name'],
                    "phone": user_data['phone'],
                    "ticket_count": str(user_data['ticket_count'])
                }
            })
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–ª–∞—Ç–µ–∂–∞ –ÆKassa
            context.user_data['yookassa_payment_id'] = payment.id
            logger.info(f"–ü–ª–∞—Ç–µ–∂ –≤ –ÆKassa —Å–æ–∑–¥–∞–Ω. –ÆKassa Payment ID: {payment.id}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ Google Sheets —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "–û–∂–∏–¥–∞–Ω–∏–µ –æ–ø–ª–∞—Ç—ã"
            if self.sheet:
                try:
                    new_row_data = [
                        user_id,
                        query.from_user.username or '',
                        user_data['name'],
                        user_data['phone'],
                        user_data['ticket_count'],
                        f"{total_amount} —Ä—É–±.",
                        datetime.now().strftime("%d.%m.%Y %H:%M"),
                        "–û–∂–∏–¥–∞–Ω–∏–µ –æ–ø–ª–∞—Ç—ã",
                        payment_id
                    ]
                    logger.debug(f"–ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ Google Sheets: {new_row_data}")
                    append_result = self.sheet.append_row(new_row_data)
                    logger.debug(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ –≤ Google Sheets: {append_result}")
                    logger.info(f"–î–∞–Ω–Ω—ã–µ '–û–∂–∏–¥–∞–Ω–∏–µ –æ–ø–ª–∞—Ç—ã' –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ Google Sheets –¥–ª—è Payment ID: {payment_id}")
                except Exception as e:
                    logger.error(f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –∑–∞–ø–∏—Å–∏ '–û–∂–∏–¥–∞–Ω–∏–µ –æ–ø–ª–∞—Ç—ã' –≤ Google Sheets: {e}", exc_info=True)
                    # –ú–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± –æ—à–∏–±–∫–µ –∑–∞–ø–∏—Å–∏
            else:
                logger.error("Google Sheets –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –∑–∞–ø–∏—Å–∏ '–û–∂–∏–¥–∞–Ω–∏–µ –æ–ø–ª–∞—Ç—ã'")
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ
            payment_text = (
                "üí≥ <b>–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –ÆKassa</b>\n\n"
                f"üõí –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: <b>{total_amount} —Ä—É–±.</b>\n"
                f"üÜî –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: <code>{payment_id}</code>\n"
                f"üè™ –ú–∞–≥–∞–∑–∏–Ω: –ë–æ–ª—å—à–∞—è –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ò–≥—Ä–∞\n\n"
                "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ:"
            )
            
            keyboard = [
                [InlineKeyboardButton("üí≥ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url=payment.confirmation.confirmation_url)],
                [InlineKeyboardButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f'check_payment_{payment_id}')],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data='cancel_payment')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(payment_text, parse_mode='HTML', reply_markup=reply_markup)
            
        except yookassa.Error as ye:
            logger.error(f"–û—à–∏–±–∫–∞ API –ÆKassa: {ye}", exc_info=True)
            try:
                await update.callback_query.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞ –≤ –ÆKassa.", show_alert=True)
            except:
                pass
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ process_payment –¥–ª—è User ID {update.callback_query.from_user.id if update.callback_query and update.callback_query.from_user else 'unknown'}: {e}", exc_info=True)
            try:
                await update.callback_query.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞.", show_alert=True)
            except:
                pass

    async def check_payment_status(self, update: Update, context: ContextTypes.DEFAULT_TYPE, payment_id):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞"""
        try:
            query = update.callback_query
            user_id = query.from_user.id
            logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è User ID: {user_id}, Payment ID: {payment_id}")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —ç—Ç–æ —Ç–æ—Ç –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä—ã–π –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª –ø–ª–∞—Ç–µ–∂
            if context.user_data.get('payment_id') != payment_id:
                logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —á—É–∂–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞. User ID: {user_id}, Payment ID: {payment_id}")
                await query.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –ø–ª–∞—Ç–µ–∂–∞.", show_alert=True)
                return

            yookassa_payment_id = context.user_data.get('yookassa_payment_id')
            if not yookassa_payment_id:
                logger.error(f"–ÆKassa Payment ID –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è Payment ID: {payment_id}")
                await query.answer("‚ö†Ô∏è –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return
            
            logger.info(f"–ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ —É –ÆKassa: {yookassa_payment_id}")
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –∏–∑ –ÆKassa
            payment = Payment.find_one(yookassa_payment_id)
            logger.info(f"–°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –æ—Ç –ÆKassa: {payment.status}")
            
            if payment.status == 'succeeded':
                # –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω
                await self.confirm_payment_success(update, context, payment_id)
            elif payment.status == 'canceled':
                # –ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω
                await self.cancel_payment(update, context)
            else:
                # –ü–ª–∞—Ç–µ–∂ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ
                status_message = {
                    'pending': '‚è≥ –ü–ª–∞—Ç–µ–∂ –µ—â–µ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã.',
                    'waiting_for_capture': '‚è≥ –ü–ª–∞—Ç–µ–∂ –æ–∂–∏–¥–∞–µ—Ç –∑–∞—Ö–≤–∞—Ç–∞. –û–±—ã—á–Ω–æ —ç—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.',
                    'canceled': '‚ùå –ü–ª–∞—Ç–µ–∂ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω.',
                }.get(payment.status, f'‚è≥ –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞: {payment.status}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.')
                
                await query.answer(status_message, show_alert=True)
                
        except yookassa.Error as ye:
            logger.error(f"–û—à–∏–±–∫–∞ API –ÆKassa –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞: {ye}", exc_info=True)
            await query.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ –≤ –ÆKassa", show_alert=True)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è Payment ID {payment_id}: {e}", exc_info=True)
            await query.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞", show_alert=True)

    async def confirm_payment_success(self, update: Update, context: ContextTypes.DEFAULT_TYPE, payment_id):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã"""
        try:
            query = update.callback_query
            user_id = query.from_user.id
            user_data = {
                'user_id': user_id,
                'username': query.from_user.username or '',
                'name': context.user_data.get('name', ''),
                'phone': context.user_data.get('phone', ''),
                'ticket_count': context.user_data.get('ticket_count', 1),
                'total_amount': context.user_data.get('total_amount', 0),
                'payment_id': payment_id
            }
            
            logger.info(f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –¥–ª—è User ID: {user_id}, Payment ID: {payment_id}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ Google Sheets
            update_success = False
            if self.sheet:
                try:
                    row_index = self.find_row_by_payment_id(payment_id)
                    if row_index != -1:
                        self.sheet.update_cell(row_index, GS_COL_STATUS, "–û–ø–ª–∞—á–µ–Ω–æ")
                        logger.info(f"–°—Ç–∞—Ç—É—Å –≤ Google Sheets –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ '–û–ø–ª–∞—á–µ–Ω–æ' –¥–ª—è —Å—Ç—Ä–æ–∫–∏ {row_index}, Payment ID: {payment_id}")
                        update_success = True
                    else:
                        logger.error(f"–°—Ç—Ä–æ–∫–∞ —Å Payment ID {payment_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ Google Sheets –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞.")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ '–û–ø–ª–∞—á–µ–Ω–æ' –≤ Google Sheets: {e}", exc_info=True)
            else:
                logger.error("Google Sheets –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ '–û–ø–ª–∞—á–µ–Ω–æ'")
            
            # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ
            success_text = (
                "üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b>\n\n"
                "‚úÖ <b>–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!</b>\n\n"
                "üîÆ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –Ω–∞ –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—É—é –∏–≥—Ä—É\n"
                "‚ú® <b>¬´–í—ã—Ö–æ–¥ –∏–∑ –ú–∞—Ç—Ä–∏—Ü—ã¬ª</b> ‚ú®\n\n"
                "üìÑ <b>–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞:</b>\n"
                f"üë§ –ò–º—è: <code>{user_data['name']}</code>\n"
                f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: <code>{user_data['phone']}</code>\n"
                f"üéüÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–ª–µ—Ç–æ–≤: <b>{user_data['ticket_count']}</b>\n"
                f"üí∞ –°—É–º–º–∞: <b>{user_data['total_amount']} —Ä—É–±.</b>\n"
                f"üÜî –ù–æ–º–µ—Ä –ø–ª–∞—Ç–µ–∂–∞: <code>{user_data['payment_id']}</code>\n"
                f"üìÖ –î–∞—Ç–∞: <code>{datetime.now().strftime('%d.%m.%Y %H:%M')}</code>\n\n"
                f"üí≥ <b>–°—Ç–∞—Ç—É—Å:</b> <code>{'–û–ø–ª–∞—á–µ–Ω–æ' if update_success else '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞'}</code>\n\n"
                "–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é! –î–æ –≤—Å—Ç—Ä–µ—á–∏ –Ω–∞ –∏–≥—Ä–µ! üéä"
            )
            
            await query.edit_message_text(success_text, parse_mode='HTML')
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ confirm_payment_success –¥–ª—è User ID {update.callback_query.from_user.id if update.callback_query and update.callback_query.from_user else 'unknown'}, Payment ID {payment_id}: {e}", exc_info=True)
            try:
                error_text = "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
                if update.callback_query and update.callback_query.message:
                    await update.callback_query.edit_message_text(error_text)
                else:
                    # –ï—Å–ª–∏ callback_query —É—Å—Ç–∞—Ä–µ–ª, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    if update.effective_chat:
                        await context.bot.send_message(chat_id=update.effective_chat.id, text=error_text)
            except Exception as inner_e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –≤ confirm_payment_success: {inner_e}")
        finally:
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            context.user_data.clear()
            logger.info(f"–°–µ—Å—Å–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ—á–∏—â–µ–Ω–∞ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã.")

    async def confirm_payment(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
        payment_id = context.user_data.get('payment_id', '')
        if payment_id:
            await self.check_payment_status(update, context, payment_id)
        else:
            try:
                await update.callback_query.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: ID –ø–ª–∞—Ç–µ–∂–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            except:
                pass

    async def cancel_payment(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–º–µ–Ω–∞ –æ–ø–ª–∞—Ç—ã"""
        try:
            query = update.callback_query
            user_id = query.from_user.id
            payment_id = context.user_data.get('payment_id')
            logger.info(f"–û—Ç–º–µ–Ω–∞ –æ–ø–ª–∞—Ç—ã –¥–ª—è User ID: {user_id}, Payment ID: {payment_id}")
            
            # –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤ —Ç–∞–±–ª–∏—Ü–µ –Ω–∞ "–û—Ç–º–µ–Ω–µ–Ω–æ"
            if self.sheet and payment_id:
                try:
                    row_index = self.find_row_by_payment_id(payment_id)
                    if row_index != -1:
                        self.sheet.update_cell(row_index, GS_COL_STATUS, "–û—Ç–º–µ–Ω–µ–Ω–æ")
                        logger.info(f"–°—Ç–∞—Ç—É—Å –≤ Google Sheets –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ '–û—Ç–º–µ–Ω–µ–Ω–æ' –¥–ª—è —Å—Ç—Ä–æ–∫–∏ {row_index}, Payment ID: {payment_id}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ '–û—Ç–º–µ–Ω–µ–Ω–æ' –≤ Google Sheets: {e}", exc_info=True)
            
            await query.edit_message_text("‚ùå –û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.\n\n–í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –Ω–æ–≤–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ cancel_payment –¥–ª—è User ID {update.callback_query.from_user.id if update.callback_query and update.callback_query.from_user else 'unknown'}: {e}", exc_info=True)
        finally:
            context.user_data.clear()
            logger.info("–°–µ—Å—Å–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—á–∏—â–µ–Ω–∞ –ø–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã –æ–ø–ª–∞—Ç—ã.")

    async def cancel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cancel"""
        try:
            user_id = update.effective_user.id if update.effective_user else 'unknown'
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–º–µ–Ω–∏–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é (/cancel).")
            context.user_data.clear()
            await update.message.reply_text("‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.\n\n–í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –Ω–æ–≤–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ cancel handler –¥–ª—è User ID {update.effective_user.id if update.effective_user else 'unknown'}: {e}", exc_info=True)


# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
matrix_bot = MatrixBot()

async def start_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await matrix_bot.start(update, context)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await matrix_bot.button(update, context)

async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await matrix_bot.handle_message(update, context)

async def cancel_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await matrix_bot.cancel(update, context)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start_handler))
    application.add_handler(CommandHandler("cancel", cancel_handler))
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))
    
    logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã. –ó–∞–ø—É—Å–∫ polling...")
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main()