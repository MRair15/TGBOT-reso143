import logging
import re
import uuid
import json
import asyncio
from datetime import datetime
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
import gspread
from google.oauth2.service_account import Credentials
from config import *

# Logging configuration
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('bot.log')
    ]
)
logger = logging.getLogger(__name__)

class MatrixBot:
    def __init__(self):
        self.sheet = None
        self.initialize_google_sheets()
    
    def initialize_google_sheets(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets"""
        try:
            if GOOGLE_SERVICE_ACCOUNT:
                credentials_info = json.loads(GOOGLE_SERVICE_ACCOUNT)
                credentials = Credentials.from_service_account_info(credentials_info, scopes=SCOPES)
                gc = gspread.authorize(credentials)
                self.sheet = gc.open_by_key(SPREADSHEET_ID).sheet1
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏, –µ—Å–ª–∏ –Ω–µ—Ç - –¥–æ–±–∞–≤–ª—è–µ–º
                if not self.sheet.cell(1, 1).value:
                    self.sheet.append_row([
                        'User ID', 'Username', '–ò–º—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è', '–¢–µ–ª–µ—Ñ–æ–Ω', 
                        '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–ª–µ—Ç–æ–≤', '–°—É–º–º–∞', '–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏', '–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã'
                    ])
                logger.info("Google Sheets –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            else:
                logger.warning("GOOGLE_SERVICE_ACCOUNT –Ω–µ –Ω–∞–π–¥–µ–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets: {e}")
            self.sheet = None
    
    def is_valid_phone(self, phone):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –≤–∞–ª–∏–¥–Ω—ã–º —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º.
        –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç—ã: +79001234567, 89001234567, (900) 123-45-67 –∏ —Ç.–ø.
        """
        # –£–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã, –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä –∏ –∑–Ω–∞–∫–æ–≤ + –∏ -
        clean_phone = re.sub(r'[^\d+\-]', '', phone)
        
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –¥–µ—Ñ–∏—Å—ã
        clean_phone = re.sub(r'[\s\-]+', '', clean_phone)
        
        # –ï—Å–ª–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 8, –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ +7
        if clean_phone.startswith('8'):
            clean_phone = '+7' + clean_phone[1:]
        
        # –ï—Å–ª–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å +7, –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–ª—å—à–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
        if clean_phone.startswith('+7'):
            if len(clean_phone) != 12:  # +7 + 10 —Ü–∏—Ñ—Ä
                return False
            if not clean_phone[2:].isdigit():
                return False
            return True
        
        # –ï—Å–ª–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å +9, –¥–æ–ø—É—Å–∫–∞–µ–º –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ (–¥–æ 15 —Ü–∏—Ñ—Ä)
        if clean_phone.startswith('+9'):
            if len(clean_phone) < 12 or len(clean_phone) > 17:
                return False
            if not clean_phone[2:].isdigit():
                return False
            return True
        
        # –î—Ä—É–≥–∏–µ —Ñ–æ—Ä–º–∞—Ç—ã –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è
        return False
    
    def user_already_registered(self, user_id):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"""
        if not self.sheet:
            return False
        try:
            records = self.sheet.get_all_records()
            for record in records:
                if str(record.get('User ID', '')) == str(user_id):
                    return True
            return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
            return False
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        try:
            user_id = update.effective_user.id
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            if self.user_already_registered(user_id):
                await update.message.reply_text("‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏!")
                return
            
            # –ù–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            welcome_text = (
                "üé≤ <b>–î–æ—Ä–æ–≥–æ–π –¥—Ä—É–≥!</b>\n\n"
                "üîÆ –ü—Ä–∏–≥–ª–∞—à–∞—é —Ç–µ–±—è –Ω–∞ –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—É—é –∏–≥—Ä—É\n"
                "‚ú® <b>¬´–í—ã—Ö–æ–¥ –∏–∑ –ú–∞—Ç—Ä–∏—Ü—ã¬ª</b> ‚ú®\n\n"
                "üìÖ <b>–î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è:</b> 25 —Å–µ–Ω—Ç—è–±—Ä—è \n"
                "üéüÔ∏è <b>–°—Ç–æ–∏–º–æ—Å—Ç—å –±–∏–ª–µ—Ç–∞:</b> <code>{price} —Ä—É–±.</code>\n\n"
                "–ó–¥–µ—Å—å —Ç—ã –æ—Ç–∫—Ä–æ–µ—à—å –Ω–æ–≤—ã–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç—ã —Å–≤–æ–µ–≥–æ —Å–æ–∑–Ω–∞–Ω–∏—è, –Ω–∞–π–¥–µ—à—å –ø—É—Ç—å –∫ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º —Ä–µ—Å—É—Ä—Å–∞–º –∏ —Å–¥–µ–ª–∞–µ—à—å –ø–µ—Ä–≤—ã–µ —à–∞–≥–∏ –∫ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ–º—É –∏–∑–º–µ–Ω–µ–Ω–∏—é —Å–≤–æ–µ–π –∂–∏–∑–Ω–∏üéØ\n\n"
                "–ü—É—Å—Ç—å –∏–≥—Ä–∞ —Å—Ç–∞–Ω–µ—Ç –Ω–∞—á–∞–ª–æ–º —Ç–≤–æ–µ–≥–æ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–µ–≥–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –∫ –º–µ—á—Ç–µ –∏ —Å—á–∞—Å—Ç—å—é!üíå"
            ).format(price=TICKET_PRICE)
            
            keyboard = [[InlineKeyboardButton("üéüÔ∏è –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", callback_data='register')]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(welcome_text, parse_mode='HTML', reply_markup=reply_markup)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ start handler: {e}")
            await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    async def button(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∫–Ω–æ–ø–æ–∫"""
        try:
            query = update.callback_query
            await query.answer()
            user_id = query.from_user.id
            
            if query.data == 'register':
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                if self.user_already_registered(user_id):
                    await query.edit_message_text("‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏!")
                    return
                    
                # –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é - —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–ª–µ—Ç–æ–≤
                context.user_data['state'] = USER_STATE_WAITING_FOR_TICKET_COUNT
                await query.edit_message_text(
                    "üéüÔ∏è <b>–°–∫–æ–ª—å–∫–æ –±–∏–ª–µ—Ç–æ–≤ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏?</b>\n\n"
                    "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10:",
                    parse_mode='HTML'
                )
            
            elif query.data.startswith('pay_'):
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–ª–∞—Ç—ã
                await self.process_payment(update, context)
            
            elif query.data == 'confirm_payment':
                # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã
                await self.confirm_payment(update, context)
            
            elif query.data == 'cancel_payment':
                # –û—Ç–º–µ–Ω–∞ –æ–ø–ª–∞—Ç—ã
                await self.cancel_payment(update, context)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ button handler: {e}")
            try:
                await update.callback_query.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
            except:
                pass
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            user_id = update.effective_user.id
            text = update.message.text.strip()
            state = context.user_data.get('state')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            if self.user_already_registered(user_id) and state != USER_STATE_WAITING_FOR_TICKET_COUNT:
                await update.message.reply_text("‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏!")
                return
            
            if state == USER_STATE_WAITING_FOR_TICKET_COUNT:
                try:
                    ticket_count = int(text)
                    if 1 <= ticket_count <= 10:
                        context.user_data['ticket_count'] = ticket_count
                        context.user_data['state'] = USER_STATE_WAITING_FOR_NAME
                        await update.message.reply_text("üë§ <b>–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:</b>", parse_mode='HTML')
                    else:
                        await update.message.reply_text("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10.")
                except ValueError:
                    await update.message.reply_text("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
                    
            elif state == USER_STATE_WAITING_FOR_NAME:
                if len(text) < 2:
                    await update.message.reply_text("‚ö†Ô∏è –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞.")
                    return
                context.user_data['name'] = text
                context.user_data['state'] = USER_STATE_WAITING_FOR_PHONE
                await update.message.reply_text("üì± <b>–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b>\n–ü—Ä–∏–º–µ—Ä: +79001234567", parse_mode='HTML')
                
            elif state == USER_STATE_WAITING_FOR_PHONE:
                # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
                logger.info(f"–í–≤–µ–¥—ë–Ω–Ω—ã–π –Ω–æ–º–µ—Ä: {text}")
                clean_phone = re.sub(r'[^\d+\-]', '', text)
                clean_phone = re.sub(r'[\s\-]+', '', clean_phone)
                logger.info(f"–ß–∏—Å—Ç—ã–π –Ω–æ–º–µ—Ä: {clean_phone}")
                logger.info(f"–î–ª–∏–Ω–∞: {len(clean_phone)}")
                logger.info(f"–í–∞–ª–∏–¥–Ω—ã–π: {self.is_valid_phone(text)}")
                
                if not self.is_valid_phone(text):
                    await update.message.reply_text(
                        "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n"
                        "–ü—Ä–∏–º–µ—Ä: +79001234567 –∏–ª–∏ 89001234567"
                    )
                    return
                context.user_data['phone'] = text
                # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –æ–ø–ª–∞—Ç—ã
                await self.show_payment_button(update, context)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_message: {e}")
            await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    async def show_payment_button(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑ –∫–Ω–æ–ø–∫–∏ –æ–ø–ª–∞—Ç—ã"""
        try:
            user_data = {
                'name': context.user_data.get('name', ''),
                'phone': context.user_data.get('phone', ''),
                'ticket_count': context.user_data.get('ticket_count', 1)
            }
            
            total_amount = user_data['ticket_count'] * TICKET_PRICE
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞
            payment_id = str(uuid.uuid4())[:8]
            context.user_data['payment_id'] = payment_id
            context.user_data['total_amount'] = total_amount
            
            # –°–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ –∑–∞–∫–∞–∑–∞
            order_text = (
                "üìÑ <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞:</b>\n\n"
                f"üë§ –ò–º—è: <code>{user_data['name']}</code>\n"
                f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: <code>{user_data['phone']}</code>\n"
                f"üéüÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–ª–µ—Ç–æ–≤: <b>{user_data['ticket_count']}</b>\n"
                f"üí∞ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: <b>{total_amount} —Ä—É–±.</b>\n\n"
                "–î–ª—è –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:"
            )
            
            keyboard = [[InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", callback_data=f'pay_{payment_id}')]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(order_text, parse_mode='HTML', reply_markup=reply_markup)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ show_payment_button: {e}")
            await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.")
    
    async def process_payment(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–ª–∞—Ç—ã"""
        try:
            query = update.callback_query
            callback_data = query.data  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback
            
            payment_id = callback_data.split('_')[1]
            
            total_amount = context.user_data.get('total_amount', 0)
            
            # –≠–º—É–ª—è—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ–ø–ª–∞—Ç—ã –ÆKassa
            payment_text = (
                "üí≥ <b>–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –ÆKassa</b>\n\n"
                "–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π:\n\n"
                f"üõí –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: <b>{total_amount} —Ä—É–±.</b>\n"
                f"üÜî –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: <code>{payment_id}</code>\n"
                f"üè™ –ú–∞–≥–∞–∑–∏–Ω: –í—ã—Ö–æ–¥ –∏–∑ –ú–∞—Ç—Ä–∏—Ü—ã\n\n"
                "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã:"
            )
            
            keyboard = [
                [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data='confirm_payment')],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data='cancel_payment')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(payment_text, parse_mode='HTML', reply_markup=reply_markup)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ process_payment: {e}")
            try:
                await update.callback_query.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–ø–ª–∞—Ç—ã.", show_alert=True)
            except:
                pass
    
    async def confirm_payment(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã"""
        try:
            query = update.callback_query
            user_data = {
                'user_id': query.from_user.id,
                'username': query.from_user.username or '',
                'name': context.user_data.get('name', ''),
                'phone': context.user_data.get('phone', ''),
                'ticket_count': context.user_data.get('ticket_count', 1),
                'total_amount': context.user_data.get('total_amount', 0),
                'payment_id': context.user_data.get('payment_id', '')
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Google Sheets
            if self.sheet:
                self.sheet.append_row([
                    user_data['user_id'],
                    user_data['username'],
                    user_data['name'],
                    user_data['phone'],
                    user_data['ticket_count'],
                    f"{user_data['total_amount']} —Ä—É–±.",
                    datetime.now().strftime("%d.%m.%Y %H:%M"),
                    "–û–ø–ª–∞—á–µ–Ω–æ"
                ])
                
                # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ
                success_text = (
                    "üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b>\n\n"
                    "‚úÖ <b>–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!</b>\n\n"
                    "üîÆ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –Ω–∞ –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—É—é –∏–≥—Ä—É\n"
                    "‚ú® <b>¬´–í—ã—Ö–æ–¥ –∏–∑ –ú–∞—Ç—Ä–∏—Ü—ã¬ª</b> ‚ú®\n\n"
                    "üìÑ <b>–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞:</b>\n"
                    f"üë§ –ò–º—è: <code>{user_data['name']}</code>\n"
                    f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: <code>{user_data['phone']}</code>\n"
                    f"üéüÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–ª–µ—Ç–æ–≤: <b>{user_data['ticket_count']}</b>\n"
                    f"üí∞ –°—É–º–º–∞: <b>{user_data['total_amount']} —Ä—É–±.</b>\n"
                    f"üÜî –ù–æ–º–µ—Ä –ø–ª–∞—Ç–µ–∂–∞: <code>{user_data['payment_id']}</code>\n"
                    f"üìÖ –î–∞—Ç–∞: <code>{datetime.now().strftime('%d.%m.%Y %H:%M')}</code>\n\n"
                    "üí≥ <b>–°—Ç–∞—Ç—É—Å:</b> <code>–û–ø–ª–∞—á–µ–Ω–æ</code>\n\n"
                    "–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é! –î–æ –≤—Å—Ç—Ä–µ—á–∏ –Ω–∞ –∏–≥—Ä–µ! üéä"
                )
                
                await query.edit_message_text(success_text, parse_mode='HTML')
            else:
                await query.edit_message_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ confirm_payment: {e}")
            try:
                await update.callback_query.edit_message_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã.")
            except:
                pass
        finally:
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            context.user_data.clear()
    
    async def cancel_payment(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–º–µ–Ω–∞ –æ–ø–ª–∞—Ç—ã"""
        try:
            query = update.callback_query
            await query.edit_message_text("‚ùå –û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.\n\n–í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –Ω–æ–≤–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ cancel_payment: {e}")
        finally:
            context.user_data.clear()
    
    async def cancel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cancel"""
        try:
            context.user_data.clear()
            await update.message.reply_text("‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.\n\n–í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –Ω–æ–≤–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ cancel handler: {e}")

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
matrix_bot = MatrixBot()

async def start_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await matrix_bot.start(update, context)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await matrix_bot.button(update, context)

async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await matrix_bot.handle_message(update, context)

async def cancel_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await matrix_bot.cancel(update, context)